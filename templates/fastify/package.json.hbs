{
  "private": true,
  "name": "{{ name }}",
  "version": "{{ version }}",
  "<Settings>": "------------------------------ Application Settings ------------------------------",
  "babel": {
    "presets": [
      "env",
      "jest",
      "react"
    ],
    "plugins": [
      "transform-decorators-legacy",
      "transform-class-properties",
      "transform-runtime",
      ["module-resolver", {
        "root": ["./src"]
      }]
    ]
  },
  "commitlint": {
    "extends": [
      "@commitlint/config-conventional"
    ]
  },
  "config": {
    "commitizen": {
      "path": "cz-conventional-changelog"
    }
  },
  "eslintConfig": {
    "root": true,
    "parser": "babel-eslint",
    "env": {
      "node": true,
      "jest/globals": true
    },
    "extends": "airbnb-base",
    "plugins": [
      "html",
      "jest"
    ],
    "rules": {
      "semi": [
        "error",
        "never"
      ]
    },
    "settings": {
      "import/resolver": {
        "babel-module": {
          "root": [
            "./src"
          ]
        }
      }
    }
  },
  "lint-staged": {
    "src/**/*.{js,jsx,css,less,scss}": [
      "prettier-standard",
      "git add"
    ]
  },
  "jest": {
    "collectCoverageFrom": [
      "!src/__tests__/bootstrap.js",
      "src/**/*.{js,jsx}"
    ],
    "setupTestFrameworkScriptFile": "<rootDir>/src/__tests__/bootstrap.js",
    "testPathIgnorePatterns": [
      "/node_modules/",
      "<rootDir>/src/__tests__/bootstrap.js"
    ]
  },
  "per-env": {
    "development": {
      "PORT": "9394"
    },
    "production": {
      "PORT": "9394",
      "IMAGE": "server:fastify"
    }
  },
  "</Settings>": "------------------------ End of Application Settings ------------------------------",
  "scripts": {
    "precommit": "lint-staged",
    "commit": "git add . && git-cz",
    "commitmsg": "commitlint -e $GIT_PARAMS",
    "compile": "babel src -d dist",
    "clean": "rimraf dist",
    "lint": "eslint --ext .jsx,.js src",
    "test": "cross-env NODE_ENV=test TIMEOUT=10000 jest --forceExit",
    "<Application>": "---------- Application Services ----------",
    "build": "per-env",
    "build:development": "npm run clean && npm run compile",
    "build:production": "docker build -t ${IMAGE} .",
    "start": "per-env",
    "start:development": "nodemon src/main.js",
    "start:production": "docker run -d -p ${PORT}:${PORT} ${IMAGE}",
    "bash": "per-env",
    "bash:production": "docker exec -it $(docker ps -q --filter ancestor=${IMAGE}) bash",
    "stop": "per-env",
    "stop:production": "docker stop $(docker ps -q --filter ancestor=${IMAGE})",
    "rim": "per-env",
    "rmi:production": "docker rmi ${IMAGE}",
    "<Deployment>": "---------- Application Deployment ----------",
    "deploy": "per-env",
    "deploy:production": "pm2 deploy ecosystem.config.js production",
    "deploy:staging": "pm2 deploy ecosystem.config.js staging"
  }
}
